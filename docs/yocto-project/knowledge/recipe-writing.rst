Recipe Writing
~~~~~~~~~~~~~~

========================
What's A BitBake Recipe?
========================

A BitBake recipe may be defined as a file that gets parsed
by the make like tool called ``bitbake``. This file contains variables
functions/task for the task executor (``bitbake``) to execute.

There are many types of recipes. The core recipes mainly built are

	* System Image recipes ``core-image-base.bb``
	* Target recipes that install files on target system image.
	* Native recipes who's output are utilized by other recipes.

A recipe can provide many packages. Allowing for seperating of
what you do or don't want in the system image. This can ofcourse
later be controlled by the ``DISTRO_FEATURES`` variable.

=========
Core Task
=========

Each recipe has a series of task that must be executed to produce a final output.

The reference manual for the list of task and there discription may be found here

https://docs.yoctoproject.org/ref-manual/tasks.html

List of core task most recipes have by default. All task are overriable, but it's
often better to use bitbake class defined task over writing your own.

1. do_fetch
	| Fetches tarballs, github repos, scripts, text files, etc from wherever
	| the caller specifies. Typically `SRC_URI`_ variable is used to define
	| where to pull in a source.

#. do_unpack
	| Will unpack sources from ``do_fetch`` task into a given recipes ``${WORKDIR}``.

#. do_prepare_recipe_sysroot
	| Installs files into a given recipes ``${WORKDIR}/recipes-sysroot`` and
	| ``${WORKDIR}/recipes-sysroot-native``. Normally you'll find the cross-compiler
	| and maybe some version of glibc used by the recipe in ``${WORKDIR}/recipes-sysroot-native``.

#. do_patch
	| After fetching and unpacking bitbake applies any patch that were
	| defined in `SRC_URI`.

#. do_populate_lic
	| Writes license information for the recipe that is collected later when the image is constructed.

#. do_configure
	| Task built for caller to configure a source. Typically before building you have to configure
	| build variables and flags to help the build tool (make,cmake,auto tools,meson,etc..) understand
	| what the developer wants to do.

#. do_compile
	| Tasked designed to compile code after caller defined configure flags and variables are set.

#. do_install
	| Tasked designed to install source whether compiled or not into ``${D}`` (Destination).
	| Typically set to ``${WORKDIR}/image``.

#. do_populate_sysroot
	| Stages files into a directory that may be used by other recipes.

#. do_package
	| Based upon what's defined in ``FILES`` variable and what's stored in ``${D}``
	| splits files stored in ``${D}`` into multiple folders in ``${WORKDIR}/packages-split``.
	| These folder files are later packaged into rpm, deb, and ipk files.

#. do_packagedata
	| Saves package metadata generated by the ``do_package`` task in ``PKGDATA_DIR`` to make it available globally.

#. do_package_qa
	| Runs QA checks on package files. These may be skipped with the use of the
	| ``INSANE_SKIP`` variable. Highly recommend you fix the issue versus just ignoring
	| it to bypass QA issues.

#. do_package_write_{ipk,deb,rpm}
	| Builds actual package that'll later be installed onto the system image.
	| The package type built is based upon the ``PACKAGE_CLASSES`` variable.
	| If you want to you can have each recipe build all 3 supported packages.
	| Don't recommend as this dramatically increases build time.

#. do_clean
	| Cleans a recipes ``${WORKDIR}``. Does not call ``do_cleansstate``.

#. do_cleansstate
	| Cleans a recipes ``${WORKDIR}`` and any shared state cache files created during build.

#. do_cleanall
	| Calls ``do_cleanssate`` and ``do_clean``. This also cleans the files the recipe downloaded
	| in the ``do_fetch`` task that are stored in ``DL_DIR``. Which is usually set in ``local.conf``.

================
Common Variables
================

**Pro Tip:** After you pull up a devshell you can see the
recipe defined variables for each task. Can even see a few
by just typing ``env`` command inside the devshell.

Typical variables you'll see utilized in a recipe are

* **S**
* **WORKDIR**
* **LICENSE**
* **LIC_FILES_CHKSUM**
* **FILESEXTRAPATHS**
* **SRC_URI**
* **DEPENDS**
* **RDEPENDS**
* **PACKAGES**
* **FILES**
* **INSANE_SKIP**
* **PROVIDES**
* **RPROVIDES**
* **RECIPE_SYSROOT**
* **RECIPE_SYSROOT_NATIVE**

.. _SRC_URI: https://docs.yoctoproject.org/bitbake/2.6/bitbake-user-manual/bitbake-user-manual-ref-variables.html#term-SRC_URI
